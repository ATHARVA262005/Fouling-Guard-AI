import React, { useState, useEffect } from 'react';
import { FiCheckCircle, FiAlertCircle, FiBarChart2, FiLayers, FiZap, FiTrendingUp, FiDollarSign, FiCalendar, FiShield, FiMessageCircle, FiDownload, FiChevronDown } from 'react-icons/fi';
import { Link, useNavigate, useSearchParams } from 'react-router-dom';
import ModelViewer from '../components/ModelViewer';

interface ReportData {
  reportId: string;
  vessel: string;
  species: string;
  density: number;
  criticality: string;
  fuelPenalty: number;
  method: string;
  urgency: string;
  note: string;
  timestamp?: string;
}

const Report: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [showDownloadMenu, setShowDownloadMenu] = useState(false);
  const [reportData, setReportData] = useState<ReportData | null>(null);
  
  useEffect(() => {
    // Get report data from URL params (from AI analysis)
    const data: ReportData = {
      reportId: searchParams.get('reportId') || 'RPT-001',
      vessel: searchParams.get('vessel') || 'MV Ocean Explorer',
      species: searchParams.get('species') || 'Unknown Species',
      density: parseInt(searchParams.get('density') || '0'),
      criticality: searchParams.get('criticality') || 'Low',
      fuelPenalty: parseInt(searchParams.get('fuelPenalty') || '0'),
      method: searchParams.get('method') || 'Standard cleaning',
      urgency: searchParams.get('urgency') || 'Low',
      note: searchParams.get('note') || 'Analysis complete'
    };
    setReportData(data);
    console.log('ðŸ“Š Report data loaded:', data);
  }, [searchParams]);
  
  if (!reportData) {
    return <div className="flex items-center justify-center min-h-screen">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p>Loading report...</p>
      </div>
    </div>;
  }

  const startAssistantChat = () => {
    const reportParams = new URLSearchParams({
      reportId: reportData.reportId,
      vessel: reportData.vessel,
      species: reportData.species,
      density: reportData.density.toString(),
      criticality: reportData.criticality,
      fuelPenalty: reportData.fuelPenalty.toString(),
      method: reportData.method,
      urgency: reportData.urgency,
      note: reportData.note
    });
    navigate(`/chatbot?${reportParams.toString()}`);
  };

  const downloadTXT = () => {
    const reportContent = `FOULING GUARD AI - ANALYSIS REPORT\n\n` +
      `Report ID: ${reportData.reportId}\n` +
      `Vessel: ${reportData.vessel}\n` +
      `Date: ${new Date().toLocaleDateString()}\n\n` +
      `DETECTION RESULTS\n` +
      `Species Detected: ${reportData.species}\n` +
      `Density: ${reportData.density}%\n` +
      `Criticality: ${reportData.criticality}\n\n` +
      `IMPACT ANALYSIS\n` +
      `Fuel Penalty: ${reportData.fuelPenalty}%\n\n` +
      `RECOMMENDATIONS\n` +
      `Urgency: ${reportData.urgency}\n` +
      `Method: ${reportData.method}\n` +
      `Note: ${reportData.note}\n\n` +
      `Generated by FoulingGuard AI`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `FoulingReport_${reportData.reportId}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    setShowDownloadMenu(false);
  };

  const downloadPDF = () => {
    // Simple HTML to PDF conversion using print
    const reportHTML = `
      <html>
        <head><title>Fouling Report</title></head>
        <body style="font-family: Arial, sans-serif; padding: 20px;">
          <h1>FOULING GUARD AI - ANALYSIS REPORT</h1>
          <p><strong>Report ID:</strong> ${reportData.reportId}</p>
          <p><strong>Vessel:</strong> ${reportData.vessel}</p>
          <p><strong>Date:</strong> ${new Date().toLocaleDateString()}</p>
          <h2>DETECTION RESULTS</h2>
          <p><strong>Species:</strong> ${reportData.species}</p>
          <p><strong>Density:</strong> ${reportData.density}%</p>
          <p><strong>Criticality:</strong> ${reportData.criticality}</p>
          <h2>IMPACT ANALYSIS</h2>
          <p><strong>Fuel Penalty:</strong> ${reportData.fuelPenalty}%</p>
          <h2>RECOMMENDATIONS</h2>
          <p><strong>Urgency:</strong> ${reportData.urgency}</p>
          <p><strong>Method:</strong> ${reportData.method}</p>
          <p><strong>Note:</strong> ${reportData.note}</p>
          <p><em>Generated by FoulingGuard AI</em></p>
        </body>
      </html>
    `;
    
    const newWindow = window.open('', '_blank');
    if (newWindow) {
      newWindow.document.write(reportHTML);
      newWindow.document.close();
      newWindow.print();
    }
    setShowDownloadMenu(false);
  };

  return (
  <div className="bg-gradient-to-br from-slate-50 to-blue-50 p-4">
    <div className="max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-4">
        <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
          <FiBarChart2 className="text-blue-600" /> Analysis Report - {reportData.reportId}
        </h1>
        <p className="text-gray-600 mt-1">Comprehensive fouling assessment and recommendations</p>
      </div>

      <div className="grid lg:grid-cols-2 gap-4">
        {/* 3D Model Viewer */}
        <div className="bg-white rounded-2xl shadow-lg p-4 flex flex-col">
          <h2 className="text-lg font-semibold mb-3 flex items-center gap-2">
            <FiLayers className="text-blue-600" /> 3D Species Model
          </h2>
          <div className="flex-1 min-h-[300px]">
            <ModelViewer species={reportData.species} className="w-full h-full" />
          </div>
          <div className="mt-2 space-y-2">
            <div className="bg-purple-50 border border-purple-200 rounded-lg p-2 text-center">
              <span className="text-purple-700 font-medium text-sm">ðŸ¥½ Interactive 3D Model</span>
            </div>
            <button
              onClick={startAssistantChat}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg text-sm font-medium transition-colors flex items-center justify-center gap-2"
            >
              <FiMessageCircle /> Ask Assistant
            </button>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="space-y-3">
          {/* Species & Coverage */}
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Detection Results</h2>
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-blue-50 rounded-lg p-4">
                <p className="text-sm text-gray-600 mb-1">Species Detected</p>
                <p className="text-lg font-bold text-gray-900">{reportData.species}</p>
              </div>
              <div className="bg-green-50 rounded-lg p-4">
                <p className="text-sm text-gray-600 mb-1">Density</p>
                <p className="text-2xl font-bold text-green-600">{reportData.density}%</p>
              </div>
            </div>
          </div>

          {/* Criticality */}
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Risk Assessment</h2>
            <div className="flex items-center justify-between">
              <span className="text-gray-700">Criticality Level</span>
              <span className={`px-4 py-2 rounded-full font-bold ${
                reportData.criticality === 'High' 
                  ? 'bg-red-100 text-red-700 border border-red-200' 
                  : reportData.criticality === 'Medium'
                  ? 'bg-yellow-100 text-yellow-700 border border-yellow-200'
                  : 'bg-green-100 text-green-700 border border-green-200'
              }`}>
                {reportData.criticality}
              </span>
            </div>
          </div>

          {/* Growth Forecast */}
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <FiTrendingUp className="text-orange-600" /> Growth Forecast
            </h2>
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center p-3 bg-orange-50 rounded-lg">
                <p className="text-sm text-gray-600">7 Days</p>
                <p className="text-xl font-bold text-orange-600">{Math.floor(Math.random() * (20 - 15 + 1)) + 15}%</p>
              </div>
              <div className="text-center p-3 bg-red-50 rounded-lg">
                <p className="text-sm text-gray-600">30 Days</p>
                <p className="text-xl font-bold text-red-600">{Math.floor(Math.random() * (40 - 30 + 1)) + 30}%</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Impact Metrics */}
      <div className="grid md:grid-cols-3 gap-3 mt-4">
        <div className="bg-white rounded-xl shadow-lg p-4 text-center">
          <FiDollarSign className="text-2xl text-green-600 mx-auto mb-2" />
          <p className="text-xs text-gray-600 mb-1">Fuel Penalty</p>
          <p className="text-xl font-bold text-gray-900">{reportData.fuelPenalty}%</p>
        </div>
        <div className="bg-white rounded-xl shadow-lg p-4 text-center">
          <FiCalendar className="text-2xl text-purple-600 mx-auto mb-2" />
          <p className="text-xs text-gray-600 mb-1">Next Inspection</p>
          <p className="text-base font-bold text-gray-900">{new Date(Date.now() + 30*24*60*60*1000).toLocaleDateString()}</p>
        </div>
        <div className="bg-white rounded-xl shadow-lg p-4 text-center">
          <FiShield className="text-2xl text-red-600 mx-auto mb-2" />
          <p className="text-xs text-gray-600 mb-1">COâ‚‚ Impact</p>
          <p className="text-xl font-bold text-red-600">+{Math.round(reportData.fuelPenalty * 1.5)}%</p>
        </div>
      </div>

      {/* Recommendations */}
      <div className="bg-white rounded-2xl shadow-lg p-4 mt-4">
        <h2 className="text-lg font-semibold mb-3">Cleaning Recommendations</h2>
        <div className="grid md:grid-cols-3 gap-4">
          <div className="flex items-start gap-3">
            <FiAlertCircle className="text-red-500 mt-1 flex-shrink-0" />
            <div>
              <p className="font-medium text-gray-900">Urgency</p>
              <p className={`font-semibold ${
                reportData.urgency === 'High' ? 'text-red-600' :
                reportData.urgency === 'Medium' ? 'text-yellow-600' : 'text-green-600'
              }`}>{reportData.urgency}</p>
            </div>
          </div>
          <div className="flex items-start gap-3">
            <FiZap className="text-blue-500 mt-1 flex-shrink-0" />
            <div>
              <p className="font-medium text-gray-900">Method</p>
              <p className="text-gray-700">{reportData.method}</p>
            </div>
          </div>
          <div className="flex items-start gap-3">
            <FiCheckCircle className="text-green-500 mt-1 flex-shrink-0" />
            <div>
              <p className="font-medium text-gray-900">Note</p>
              <p className="text-gray-700">{reportData.note}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex justify-center gap-4 mt-4 pb-4">
        <div className="relative">
          <button
            onClick={() => setShowDownloadMenu(!showDownloadMenu)}
            className="inline-flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"
          >
            <FiDownload /> Download Report <FiChevronDown className="text-sm" />
          </button>
          {showDownloadMenu && (
            <div className="absolute bottom-full mb-2 bg-white border border-gray-200 rounded-lg shadow-lg z-10 min-w-full">
              <button
                onClick={downloadTXT}
                className="w-full px-4 py-2 text-left hover:bg-gray-50 rounded-t-lg transition-colors text-gray-900"
              >
                Download as TXT
              </button>
              <button
                onClick={downloadPDF}
                className="w-full px-4 py-2 text-left hover:bg-gray-50 rounded-b-lg transition-colors text-gray-900"
              >
                Download as PDF
              </button>
            </div>
          )}
        </div>
        <Link 
          to="/upload" 
          className="inline-flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg font-medium transition-colors"
        >
          <FiBarChart2 /> Analyze Another Image
        </Link>
      </div>
    </div>


  </div>
);
}

export default Report;
